/*a. SacarUnaFicha_SiSePuede(colorDeLaFicha) que, dado el colorDeLaFicha que debe
sacarse, saque una ficha siempre y cuando la misma esté en la celda. Si no hubiera fichas del
color dado, el procedimiento no hace nada. Si hubiera varias fichas, solo debe sacar una.
OBSERVACIÓN: cada ficha se representa con una bolita del color correspondiente.
b. DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante) que, dados
los colores de dos jugadores, cuyos puntos se representan mediante la cantidad de bolitas del
color del jugador, otorgue un punto al jugador con color colorDelLocal solamente en el caso
en que la celda actual contiene la misma cantidad de bolitas de ambos colores.
c. ExpandirBacteriaDeLaColonia(), que siempre que en la celda actual haya un cultivo de
bacterias y haya suficientes nutrientes, agregue exactamente una bacteria más y consuma
nutrientes, a razón de dos nutrientes por bacteria expandida; si no hay bacterias o no hay
suficientes nutrientes, no hace nada. Las bacterias se representan con bolitas Verdes y los
nutrientes con bolitas Rojas.
d. PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha), que dado un color para
representar flechas, ponga una flecha al Norte si existe espacio para moverse en esa dirección.
Las flechas serán representadas con una bolita del color dado.
*/


program {
    
}

/*3a*/
procedure SacarUnaFicha_SiSePuede(colorDeLaFicha) {
    /*PROPOSITO: saca una ficha de el color **colorDeLaFicha** siempre y cuando la misma esté en la celda. Si no hubiera fichas del color dado, el procedimiento no hace nada. Si hubiera varias fichas, solo debe sacar una.
    PRECONDICION:-.
    PARAMETROS: *colorDeLaFicha - tipo color - color de la ficha a sacar.
    OBSERVACIÓN: cada ficha se representa con una bolita del color correspondiente. */
    if hayBolitas(colorDeLaFicha)) {
        Sacar(colorDeLaFicha)
    }
}

/*3b*/
procedure DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante) {
    /*PROPOSITO: dados los colores de dos jugadores **colorDelLocal** y **colorDelVisitante**, otorgue un punto al jugador con color colorDelLocal solamente en el caso en que la celda actual contiene la misma cantidad de bolitas de ambos colores.
    PRECONDICION:Tener al menos dos colores de bolitas en la celda actual.
    PARAMETROS: *colorDelLocal - tipo color - color de jugador local.
                *colorDelVisitante- tipo color - color de jugardor visitante.
    OBSERVACIÓN: los puntos se representan mediante la cantidad de bolitas del color del jugador */
    if (nroBolitas(colorDelLocal) == nroBolitas(colorDelVisitante)) {
        Poner(colorDelLocal)
    }
}

/*3c*/
procedure ExpandirBacteriaDeLaColonia() {
    /*PROPOSITO: Agrega exactamente una bacteria más y consume nutrientes, a razón de dos nutrientes por bacteria expandida; si no hay bacterias o no hay suficientes nutrientes, no hace nada.
    PRECONDICION: Que en la celda actual haya un cultivo de bacterias y haya suficientes nutrientes.
    PARAMETROS:-.
    OBSERVACIÓN: Las bacterias se representan con bolitas Verdes y los nutrientes con bolitas Rojas. */
    if (hayBolitas(Verde) && hayBolitas(Rojo) && nroBolitas(Verde) >= 1 && nroBolitas(Rojo) >=2) {
        Poner(Verde)
        repeat(2) {
            Sacar(Rojo)
        }
    }
}

/*3d*/
procedure  PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha) {
    /*  PROPOSITO: Dado un color para representar flechas, ponga una flecha al Norte si existe espacio para moverse en esa dirección. 
        PRECONDICIONES:Tener una celda lindante hacia la direccion norte, dos celdas hacia la direccion sur, una al oeste y otra hacia el este de la celda actual.
        PARAMETROS:
        *colorDeLaFlecha - color - color que va a tener la flecha.
        OBSERVACIONES: Las flechas serán representadas con una bolita del color dado.
    */
    if(puedeMover(Norte))
    {
        PonerFlecha_AlNorte(colorDeLaFlecha)
    }
}

procedure PonerFlecha_AlNorte(colorDeLaFlecha) {
    /*  PROPOSITO: Dado un color para representar flechas, ponga una flecha al Norte. 
        PRECONDICIONES:Tener una celda lindante hacia la direccion norte, dos celdas hacia la direccion sur, una al oeste y otra hacia el este de la celda actual.
        PARAMETROS:
        *colorDeLaFlecha - color - color que va a tener la flecha.
        OBSERVACIONES: Las flechas serán representadas con una bolita del color dado.
    */
    ArmarPuntaDeFlecha(colorDeLaFlecha)
    ArmarCuerpoDeFlecha(colorDeLaFlecha)
}

procedure ArmarPuntaDeFlecha(colorDeLaFlecha) {
    /*  PROPOSITO: Dado un color para representar flechas, arma la punta de una flecha al Norte. 
        PRECONDICIONES:Tener una celda lindante hacia la direccion norte, una al oeste y otra hacia el este de la celda actual.
        PARAMETROS:
        *colorDeLaFlecha - color - color que va a tener la flecha.
        OBSERVACIONES: Las flechas serán representadas con una bolita del color dado.
    */
    Mover(Norte)
    Poner(colorDeLaFlecha)
    Mover(Sur)
    if(puedeMover(Oeste) && puedeMover(Este))
    {
        Mover(Oeste)
        repeat(2) {
        Poner(colorDeLaFlecha)
        Mover(Este)
    }
    Poner(colorDeLaFlecha)
    Mover(Oeste)
    }
    
}

procedure ArmarCuerpoDeFlecha(colorDeLaFlecha) {
    /*  PROPOSITO: Dado un color para representar flechas, arma el cuerpo de una flecha al Norte. 
        PRECONDICIONES:Tener dos celdas hacia la direccion sur de la celda actual.
        PARAMETROS:
        *colorDeLaFlecha - color - color que va a tener la flecha.
        OBSERVACIONES: Las flechas serán representadas con una bolita del color dado.
    */
    if(puedeMover(Sur) && puedeMover(Este) && puedeMover(Oeste))
    {
        Mover(Sur)
        Poner(colorDeLaFlecha)
        if(puedeMover(Sur))
        {
        Mover(Sur)
        Poner(colorDeLaFlecha)
        }
    }
    
}